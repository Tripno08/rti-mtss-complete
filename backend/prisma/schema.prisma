// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Rede/Distrito Escolar
model SchoolNetwork {
  id            String    @id @default(uuid())
  name          String
  description   String?
  code          String?   // Código opcional para identificação da rede
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  schools       School[]
  
  @@map("school_networks")
}

// Modelo de Escola
model School {
  id            String    @id @default(uuid())
  name          String
  code          String?   // Código opcional para identificação da escola
  address       String?
  phone         String?
  email         String?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  networkId     String?
  network       SchoolNetwork? @relation(fields: [networkId], references: [id])
  students      Student[]
  teams         RtiTeam[]
  classes       Class[]        // Relação com turmas
  calendarEvents CalendarEvent[] // Relação com eventos de calendário
  
  @@map("schools")
}

// Modelo de Usuário
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole  @default(TEACHER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Novo relacionamento com escola - comentado para resolver o problema
  // schoolId      String?
  // school        School?   @relation(fields: [schoolId], references: [id])

  // Relacionamentos
  students      Student[]
  userSyncs     UserSync[]
  teamMemberships RtiTeamMember[]
  meetingParticipations MeetingParticipant[]
  tutorCommunications TutorCommunication[]
  sentMessages       InternalMessage[] @relation("SentMessages")
  receivedMessages   InternalMessage[] @relation("ReceivedMessages")
  assignedReferrals  Referral[]       @relation("AssignedReferrals")
  createdReferrals   Referral[]       @relation("CreatedReferrals")
  notifications      Notification[]
  rastreiosAplicados Screening[]
  sessoesAplicadas   InterventionSession[]
  classes            Class[]          // Relação com turmas
  lessonPlans        LessonPlan[]     // Relação com planos de aula
  createdEvents      CalendarEvent[]  @relation("EventCreator") // Eventos criados
  eventParticipations CalendarEventParticipant[] // Participações em eventos
  
  @@map("users")
}

// Modelo de Estudante
model Student {
  id            String    @id @default(uuid())
  name          String
  grade         String
  dateOfBirth   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Novo relacionamento com escola
  schoolId      String?
  school        School?   @relation(fields: [schoolId], references: [id])
  
  // Relacionamentos
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  assessments   Assessment[]
  interventions Intervention[]
  teams              StudentTeam[]
  tutorCommunications TutorCommunication[]
  messages           InternalMessage[]
  referrals          Referral[]
  dificuldades       EstudanteDificuldade[]
  rastreios          Screening[]
  classes            ClassStudent[]    // Nova relação com turmas
  
  @@map("students")
}

// Modelo de Avaliação
model Assessment {
  id            String    @id @default(uuid())
  date          DateTime
  type          String
  score         Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  
  @@map("assessments")
}

// Modelo de Intervenção
model Intervention {
  id            String    @id @default(uuid())
  startDate     DateTime
  endDate       DateTime?
  type          String
  description   String
  status        InterventionStatus @default(ACTIVE)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  baseInterventionId String?
  baseIntervention BaseIntervention? @relation(fields: [baseInterventionId], references: [id])
  progressos     InterventionProgress[]
  sessoes        InterventionSession[]
  metas          Goal[]
  
  @@map("interventions")
}

// Modelo de Integração com Plataforma
model PlatformIntegration {
  id            String    @id @default(uuid())
  platform      Platform
  name          String
  clientId      String
  clientSecret  String
  tenantId      String?   // Para Microsoft Teams
  redirectUri   String
  scopes        String    // Escopos de permissão separados por vírgula
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  classSyncs    ClassSync[]
  userSyncs     UserSync[]
  webhooks      Webhook[]
  ltiDeployments LtiDeployment[]
  
  @@map("platform_integrations")
}

// Modelo de Sincronização de Turma
model ClassSync {
  id                String    @id @default(uuid())
  externalClassId   String
  className         String
  lastSyncedAt      DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  integrationId     String
  integration       PlatformIntegration @relation(fields: [integrationId], references: [id])
  userSyncs         UserSync[]
  
  @@map("class_syncs")
}

// Modelo de Sincronização de Usuário
model UserSync {
  id                String    @id @default(uuid())
  externalUserId    String
  email             String
  role              String    // Papel do usuário na plataforma externa
  lastSyncedAt      DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  integrationId     String
  integration       PlatformIntegration @relation(fields: [integrationId], references: [id])
  classSyncId       String?
  classSync         ClassSync? @relation(fields: [classSyncId], references: [id])
  
  @@map("user_syncs")
}

// Modelo de Webhook
model Webhook {
  id                String    @id @default(uuid())
  url               String
  secret            String
  events            String    // Eventos inscritos separados por vírgula
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  integrationId     String
  integration       PlatformIntegration @relation(fields: [integrationId], references: [id])
  
  @@map("webhooks")
}

// Modelo de Deployment LTI
model LtiDeployment {
  id                String    @id @default(uuid())
  deploymentId      String    // ID do deployment na plataforma LTI
  issuer            String    // URL do emissor LTI
  clientId          String    // ID do cliente para este deployment
  authLoginUrl      String    // URL de login para autenticação
  authTokenUrl      String    // URL para obtenção de tokens
  keysetUrl         String    // URL do conjunto de chaves JWK
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  integrationId     String
  integration       PlatformIntegration @relation(fields: [integrationId], references: [id])
  
  @@map("lti_deployments")
}

// Modelo de Equipe RTI
model RtiTeam {
  id            String    @id @default(uuid())
  name          String
  description   String?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Novo relacionamento com escola
  schoolId      String?
  school        School?   @relation(fields: [schoolId], references: [id])
  
  // Relacionamentos existentes
  members       RtiTeamMember[]
  meetings      RtiMeeting[]
  students      StudentTeam[]
  referrals     Referral[]
  
  @@map("rti_teams")
}

// Modelo de Membro de Equipe RTI
model RtiTeamMember {
  id            String    @id @default(uuid())
  role          TeamRole  // Papel na equipe (coordenador, especialista, etc.)
  joinedAt      DateTime  @default(now())
  leftAt        DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  teamId        String
  team          RtiTeam   @relation(fields: [teamId], references: [id])
  
  @@map("rti_team_members")
}

// Modelo de Associação Estudante-Equipe
model StudentTeam {
  id            String    @id @default(uuid())
  assignedAt    DateTime  @default(now())
  removedAt     DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  teamId        String
  team          RtiTeam   @relation(fields: [teamId], references: [id])
  
  @@map("student_teams")
}

// Modelo de Reunião RTI
model RtiMeeting {
  id            String    @id @default(uuid())
  title         String
  date          DateTime
  location      String?
  status        MeetingStatus @default(SCHEDULED)
  notes         String?   @db.Text
  summary       String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  teamId        String
  team          RtiTeam   @relation(fields: [teamId], references: [id])
  participants  MeetingParticipant[]
  referrals     Referral[]
  
  @@map("rti_meetings")
}

// Modelo de Participante de Reunião
model MeetingParticipant {
  id            String    @id @default(uuid())
  attended      Boolean   @default(false)
  role          String?   // Papel na reunião (facilitador, secretário, etc.)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  meetingId     String
  meeting       RtiMeeting @relation(fields: [meetingId], references: [id])
  
  @@map("meeting_participants")
}

// Modelo de Comunicação com Tutor/Responsável
model TutorCommunication {
  id            String    @id @default(uuid())
  type          CommunicationType
  date          DateTime
  subject       String
  content       String    @db.Text
  contactInfo   String?   // Email ou telefone do tutor/responsável
  contactName   String?   // Nome do tutor/responsável
  status        CommunicationStatus @default(SENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  @@map("tutor_communications")
}

// Modelo de Mensagem Interna
model InternalMessage {
  id            String    @id @default(uuid())
  subject       String
  content       String    @db.Text
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  senderId      String
  sender        User      @relation(name: "SentMessages", fields: [senderId], references: [id])
  receiverId    String
  receiver      User      @relation(name: "ReceivedMessages", fields: [receiverId], references: [id])
  studentId     String?
  student       Student?  @relation(fields: [studentId], references: [id])
  
  @@map("internal_messages")
}

// Modelo de Encaminhamento
model Referral {
  id            String    @id @default(uuid())
  title         String
  description   String    @db.Text
  dueDate       DateTime?
  status        ReferralStatus @default(PENDING)
  priority      ReferralPriority @default(MEDIUM)
  completedAt   DateTime?
  notes         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  assignedToId  String
  assignedTo    User      @relation(name: "AssignedReferrals", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User      @relation(name: "CreatedReferrals", fields: [createdById], references: [id])
  teamId        String?
  team          RtiTeam?  @relation(fields: [teamId], references: [id])
  meetingId     String?
  meeting       RtiMeeting? @relation(fields: [meetingId], references: [id])
  
  @@map("referrals")
}

// Modelo de Notificação
model Notification {
  id            String    @id @default(uuid())
  type          NotificationType
  title         String
  content       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  TEACHER
  SPECIALIST
}

enum InterventionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// Enum para tipos de plataforma
enum Platform {
  GOOGLE_CLASSROOM
  MICROSOFT_TEAMS
  LTI
  CUSTOM
}

enum TeamRole {
  COORDINATOR
  SPECIALIST
  TEACHER
  COUNSELOR
  PSYCHOLOGIST
  OTHER
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  PHONE
  IN_PERSON
  LETTER
  OTHER
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  REPLIED
  FAILED
}

enum ReferralStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReferralPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  MEETING_SCHEDULED
  MEETING_REMINDER
  REFERRAL_ASSIGNED
  REFERRAL_DUE_SOON
  REFERRAL_OVERDUE
  MESSAGE_RECEIVED
  STUDENT_UPDATED
  ASSESSMENT_ADDED
  INTERVENTION_UPDATED
  TEAM_INVITATION
}

// Enum para níveis de dificuldade de aprendizagem
enum NivelDificuldade {
  BAIXO
  MODERADO
  ALTO
}

// Enum para categorias de dificuldade de aprendizagem
enum CategoriaDificuldade {
  LEITURA
  ESCRITA
  MATEMATICA
  ATENCAO
  COMPORTAMENTO
  COMUNICACAO
  COORDENACAO_MOTORA
  MEMORIA
  ORGANIZACAO
  OUTRO
}

// Modelo de Dificuldade de Aprendizagem
model DificuldadeAprendizagem {
  id            String    @id @default(uuid())
  nome          String
  descricao     String
  sintomas      String
  categoria     CategoriaDificuldade
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  estudanteDificuldades EstudanteDificuldade[]
  intervencoes         DificuldadeIntervencao[]
  
  @@map("dificuldades_aprendizagem")
}

// Modelo de relação entre Estudante e Dificuldade de Aprendizagem
model EstudanteDificuldade {
  id                String    @id @default(uuid())
  nivel             NivelDificuldade
  dataIdentificacao DateTime  @default(now())
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  estudanteId       String
  estudante         Student   @relation(fields: [estudanteId], references: [id])
  dificuldadeId     String
  dificuldade       DificuldadeAprendizagem @relation(fields: [dificuldadeId], references: [id])
  
  @@map("estudante_dificuldades")
}

// Enum para categorias de instrumentos de rastreio
enum CategoriaInstrumento {
  ACADEMICO
  COMPORTAMENTAL
  SOCIOEMOCIONAL
  COGNITIVO
  LINGUAGEM
  MOTOR
  ATENCAO
  OUTRO
}

// Modelo de Instrumento de Rastreio
model ScreeningInstrument {
  id            String    @id @default(uuid())
  nome          String
  descricao     String
  categoria     CategoriaInstrumento
  faixaEtaria   String    // Ex: "6-8 anos", "9-12 anos"
  tempoAplicacao String    // Ex: "15-20 minutos"
  instrucoes    String    @db.Text
  ativo         Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  indicadores   ScreeningIndicator[]
  rastreios     Screening[]
  
  @@map("screening_instruments")
}

// Enum para tipos de indicador de rastreio
enum TipoIndicador {
  ESCALA_LIKERT
  SIM_NAO
  NUMERICO
  MULTIPLA_ESCOLHA
  TEXTO_LIVRE
}

// Modelo de Indicador de Rastreio
model ScreeningIndicator {
  id            String    @id @default(uuid())
  nome          String
  descricao     String
  tipo          TipoIndicador
  valorMinimo   Float
  valorMaximo   Float
  pontoCorte    Float     // Valor que indica necessidade de intervenção
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  instrumentoId String
  instrumento   ScreeningInstrument @relation(fields: [instrumentoId], references: [id])
  resultados    ScreeningResult[]
  
  @@map("screening_indicators")
}

// Enum para status do rastreio
enum StatusRastreio {
  AGENDADO
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}

// Enum para níveis de risco
enum NivelRisco {
  BAIXO
  MODERADO
  ALTO
  MUITO_ALTO
}

// Modelo de Rastreio
model Screening {
  id            String    @id @default(uuid())
  dataAplicacao DateTime
  observacoes   String?   @db.Text
  status        StatusRastreio @default(EM_ANDAMENTO)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  estudanteId   String
  estudante     Student   @relation(fields: [estudanteId], references: [id])
  aplicadorId   String
  aplicador     User      @relation(fields: [aplicadorId], references: [id])
  instrumentoId String
  instrumento   ScreeningInstrument @relation(fields: [instrumentoId], references: [id])
  resultados    ScreeningResult[]
  
  @@map("screenings")
}

// Modelo de Resultado de Rastreio
model ScreeningResult {
  id            String    @id @default(uuid())
  valor         Float
  nivelRisco    NivelRisco?
  observacoes   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  rastreioId    String
  rastreio      Screening @relation(fields: [rastreioId], references: [id])
  indicadorId   String
  indicador     ScreeningIndicator @relation(fields: [indicadorId], references: [id])
  
  @@map("screening_results")
}

// Enum para níveis de intervenção
enum NivelIntervencao {
  UNIVERSAL
  SELETIVO
  INTENSIVO
}

// Enum para áreas de intervenção
enum AreaIntervencao {
  LEITURA
  ESCRITA
  MATEMATICA
  COMPORTAMENTO
  ATENCAO
  SOCIOEMOCIONAL
  LINGUAGEM
  OUTRO
}

// Enum para frequência de aplicação
enum FrequenciaAplicacao {
  DIARIA
  SEMANAL
  QUINZENAL
  MENSAL
  PERSONALIZADA
}

// Modelo de Intervenção Base (Catálogo)
model BaseIntervention {
  id                String    @id @default(uuid())
  nome              String
  descricao         String
  objetivo          String
  nivel             NivelIntervencao
  area              AreaIntervencao
  tempoEstimado     String    // Ex: "30 minutos", "1 hora"
  frequencia        FrequenciaAplicacao
  materiaisNecessarios String?
  evidenciaCientifica String?
  fonteEvidencia    String?
  ativo             Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  protocolos        InterventionProtocol[]
  intervencoes      Intervention[]
  kpis              InterventionKpi[]
  dificuldades      DificuldadeIntervencao[]
  
  @@map("base_interventions")
}

// Modelo de Protocolo de Intervenção
model InterventionProtocol {
  id                String    @id @default(uuid())
  nome              String
  descricao         String
  duracaoEstimada   String    // Ex: "6 semanas", "3 meses"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  baseInterventionId String
  baseIntervention   BaseIntervention @relation(fields: [baseInterventionId], references: [id])
  etapas             ProtocolStep[]
  
  @@map("intervention_protocols")
}

// Modelo de Etapa do Protocolo
model ProtocolStep {
  id                String    @id @default(uuid())
  ordem             Int
  titulo            String
  descricao         String
  tempoEstimado     String    // Ex: "15 minutos"
  materiaisNecessarios String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  protocoloId       String
  protocolo         InterventionProtocol @relation(fields: [protocoloId], references: [id])
  
  @@map("protocol_steps")
}

// Modelo de KPI de Intervenção
model InterventionKpi {
  id                String    @id @default(uuid())
  nome              String
  descricao         String
  unidadeMedida     String    // Ex: "pontos", "percentual"
  valorMinimo       Float?
  valorMaximo       Float?
  valorAlvo         Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  baseInterventionId String
  baseIntervention   BaseIntervention @relation(fields: [baseInterventionId], references: [id])
  progressos         InterventionProgress[]
  resultados         KpiResult[]
  
  @@map("intervention_kpis")
}

// Modelo de Progresso de Intervenção
model InterventionProgress {
  id                String    @id @default(uuid())
  data              DateTime
  observacoes       String?
  valorKpi          Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  interventionId    String
  intervention      Intervention @relation(fields: [interventionId], references: [id])
  kpiId             String?
  kpi               InterventionKpi? @relation(fields: [kpiId], references: [id])
  
  @@map("intervention_progress")
}

// Enum para status de sessão
enum StatusSessao {
  AGENDADA
  REALIZADA
  CANCELADA
  REMARCADA
}

// Enum para tipo de meta
enum TipoMeta {
  ACADEMICA
  COMPORTAMENTAL
  SOCIOEMOCIONAL
  COGNITIVA
  LINGUAGEM
  MOTORA
  ATENCAO
  OUTRA
}

// Modelo de Sessão de Intervenção
model InterventionSession {
  id                String    @id @default(uuid())
  data              DateTime
  duracao           Int       // Duração em minutos
  status            StatusSessao @default(AGENDADA)
  observacoes       String?
  materiaisUtilizados String?
  desafiosEncontrados String?
  proximosPassos    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  interventionId    String
  intervention      Intervention @relation(fields: [interventionId], references: [id])
  aplicadorId       String
  aplicador         User      @relation(fields: [aplicadorId], references: [id])
  kpiResults        KpiResult[]
  
  @@map("intervention_sessions")
}

// Modelo de Resultado de KPI
model KpiResult {
  id                String    @id @default(uuid())
  valor             Float
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  sessionId         String
  session           InterventionSession @relation(fields: [sessionId], references: [id])
  kpiId             String
  kpi               InterventionKpi @relation(fields: [kpiId], references: [id])
  
  @@map("kpi_results")
}

// Modelo de Meta SMART
model Goal {
  id                String    @id @default(uuid())
  titulo            String
  descricao         String
  tipo              TipoMeta
  especifico        String    // Specific
  mensuravel        String    // Measurable
  atingivel         String    // Achievable
  relevante         String    // Relevant
  temporal          String    // Time-bound
  dataInicio        DateTime
  dataFim           DateTime
  status            Boolean   @default(false) // false = não atingida, true = atingida
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  interventionId    String
  intervention      Intervention @relation(fields: [interventionId], references: [id])
  
  @@map("goals")
}

// Modelo de relação entre Dificuldade de Aprendizagem e Intervenção Base
model DificuldadeIntervencao {
  id                String    @id @default(uuid())
  eficacia          Int       // Valor de 1 a 5 indicando a eficácia da intervenção para esta dificuldade
  observacoes       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relacionamentos
  dificuldadeId     String
  dificuldade       DificuldadeAprendizagem @relation(fields: [dificuldadeId], references: [id])
  intervencaoId     String
  intervencao       BaseIntervention @relation(fields: [intervencaoId], references: [id])
  
  @@unique([dificuldadeId, intervencaoId])
  @@map("dificuldade_intervencoes")
}

// Modelo de Turma
model Class {
  id            String    @id @default(uuid())
  name          String
  grade         String
  subject       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  schoolId      String
  school        School    @relation(fields: [schoolId], references: [id])
  teacherId     String
  teacher       User      @relation(fields: [teacherId], references: [id])
  students      ClassStudent[]
  contents      Content[]
  lessonPlans   LessonPlan[] // Relação com planos de aula
  calendarEvents CalendarEvent[] // Relação com eventos de calendário
  
  @@map("classes")
}

// Modelo de Relação Turma-Estudante
model ClassStudent {
  id            String    @id @default(uuid())
  joinedAt      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos
  classId       String
  class         Class     @relation(fields: [classId], references: [id])
  studentId     String
  student       Student   @relation(fields: [studentId], references: [id])
  
  @@unique([classId, studentId])
  @@map("class_students")
}

// Modelo de Conteúdo
model Content {
  id          String    @id @default(uuid())
  title       String
  description String?
  type        String    // 'lesson', 'activity', 'assessment'
  status      String    // 'draft', 'published'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  classId     String
  class       Class     @relation(fields: [classId], references: [id])
  lessonPlans LessonPlan[] // Relação com planos de aula
  
  @@map("contents")
}

// Modelo de Plano de Aula
model LessonPlan {
  id              String    @id @default(uuid())
  title           String
  description     String?
  objectives      String?   // Objetivos da aula
  resources       String?   // Recursos necessários
  activities      String?   // Atividades planejadas
  assessment      String?   // Avaliação da aprendizagem
  duration        Int?      // Duração em minutos
  date            DateTime? // Data planejada para a aula
  status          String    @default("draft") // 'draft', 'published', 'completed'
  notes           String?   // Observações adicionais
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  classId         String
  class           Class     @relation(fields: [classId], references: [id])
  contentId       String?
  content         Content?  @relation(fields: [contentId], references: [id])
  teacherId       String
  teacher         User      @relation(fields: [teacherId], references: [id])
  calendarEvents  CalendarEvent[]
  
  @@map("lesson_plans")
}

// Modelo de Evento de Calendário
model CalendarEvent {
  id              String    @id @default(uuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  allDay          Boolean   @default(false)
  location        String?
  type            String    // 'meeting', 'lesson', 'assessment', 'intervention', 'personal'
  status          String    @default("scheduled") // 'scheduled', 'cancelled', 'completed'
  color           String?   // Cor para exibição no calendário
  recurrence      String?   // Padrão de recorrência (JSON)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  creatorId       String
  creator         User      @relation(fields: [creatorId], references: [id], name: "EventCreator")
  participants    CalendarEventParticipant[]
  schoolId        String?
  school          School?   @relation(fields: [schoolId], references: [id])
  classId         String?
  class           Class?    @relation(fields: [classId], references: [id])
  lessonPlanId    String?
  lessonPlan      LessonPlan? @relation(fields: [lessonPlanId], references: [id])
  
  @@map("calendar_events")
}

// Modelo de Participante de Evento
model CalendarEventParticipant {
  id              String    @id @default(uuid())
  status          String    @default("pending") // 'pending', 'accepted', 'declined'
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relacionamentos
  eventId         String
  event           CalendarEvent @relation(fields: [eventId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
  @@map("calendar_event_participants")
}
